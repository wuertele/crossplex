# -*- makefile -*-		Demo Makefile for using Crossplex to build a system that boots on dcx3400
# davew@motorola.com		Mon Oct  5 18:10:40 2009


#######################################################################################################
##### "make dcxlinux-test" outputs a HUGE volume to stdout, so you should pipe it to a file!      #####
##### "make dcxlinux-test" results in a kernel that can be booted on its own (rootfs is included) #####
#####                                                                                             #####
##### Running "make dcxlinux-test"      takes about 48 minutes on a 2.6GHz system                 #####
##### Running "make -j10 dcxlinux-test" takes about 25 minutes on a 4-cpu 2.6GHz system           #####
#######################################################################################################

#### Let's configure a linuxthreads-style motocap glibc toolchain with debug symbols ####

# Let's use the versions that are used by the current motocap toolchain
MOTO23_TOOLCHAIN_VERSIONS  := binutils-2.17.50.0.12 gcc-3.4.6 glibc-2.3.6 linux-2.6.18.8 gdb-6.5
# "toolchain flags" are arguments to the various sub-macros of Glibc_Toolchain (in this case, the glibc library builder)
# Motocap currently uses linuxthreads, so we'll go with that.  Alternatively, we could have used "THREAD=nptl"
# Including the tag DEBUG_GLIBC generates libraries with debugging symbols
MOTO_TOOLCHAIN_FLAGS       := THREAD=linuxthreads DEBUG_GLIBC
# "patch tags" are a way to pick and choose patchsets.  In the appropriate patch directories, only patches found in these subdirectories will get applied.
MOTO_TOOLCHAIN_PATCHTAGS   := mototc broadcom-20060618 motocap-20060618

# We'll call our toolchain "motocap23-glibc", and we'll refer to it below as "motocap23-glibc/toolchain".
$(eval $(call Glibc_Toolchain,$(BUILD_TOP),motocap23-glibc,mipsel-lt-linux-gnu,$(MOTO23_TOOLCHAIN_VERSIONS),PATH,$(MOTO_TOOLCHAIN_FLAGS),$(MOTO_TOOLCHAIN_PATCHTAGS)))

# run "make motocap23-glibc-toolchain-test" to just build the toolchain
motocap23-glibc-toolchain-test:  $(motocap23-glibc_TOOLCHAIN_TARGETS)


#### Next, configure a root filesystem, built by the above toolchain, for bundling into a kernel initramfs ####

# We'll call our target filesystem "dcx/initramfs" (and that's exactly how we'll refer to it later).
# Note that packages built for this target filesystem will use the toolchain we configured above.
$(eval $(call Configure_TargetFS,dcx/initramfs,$(BUILD_TOP),motocap23-glibc/toolchain PATH,STRIP LDD))

# Configure the copying of some basic template files in to the target filesystem.
$(eval $(call TargetFS_Template,dcx/initramfs,$(shell pwd)/fs-template/INITRAMFS))

# Configure the Unpacking, Building, Staging, and Installing of busybox and udev into the target filesystem.
$(eval $(call TargetFS_Install_Make,dcx/initramfs,busybox-1.4.0,RELEASE,BASIC SH))
$(eval $(call TargetFS_Install_Autoconf,dcx/initramfs,udev-132,RELEASE,minimal))

# Configure the Building and Installing of a local program into the target filesystem.
$(eval $(call TargetFS_Install_Local_Program,dcx/initramfs,hello-world,hello-world,STRIP))

# run "make initramfs-test" to get all of the above built and installed
initramfs-test: $(dcx/initramfs_TARGETFS_TARGETS)


#### Finally, let's build a kernel for the dcx3400, using our toolchain from above and bundling our root filesystem into an initramfs ####

# Where the linux kernel build should look for the root of its initramfs
MOTOCAP_KERNEL_INITRAMFS_ROOT := $(call Targetfs_Prefix_Of,dcx/initramfs)
# What has to be built before the kernel:  basically, all the target files in the initramfs
MOTOCAP_KERNEL_DEPENDENCIES   := $(call Complete_Targetfs_Target_List,dcx/initramfs)

# Configure the kernel build
$(eval $(call Build_Linux_Kernel,dcx/dcx3400-linux,linux-2.6.18.8,$(BUILD_TOP),$(MOTOCAP_KERNEL_INITRAMFS_ROOT),,$(MOTOCAP_KERNEL_DEPENDENCIES),motocap23-glibc/toolchain PATH,,,broadcom-20060618 motocap-20060618))

# run "make dcxlinux-test" to build everything
dcxlinux-test: $(dcx/dcx3400-linux_KERNEL_COMPRESSED_FILENAME)
	@echo you can find the kernel at $<
