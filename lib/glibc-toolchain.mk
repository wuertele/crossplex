# -*- makefile -*-		toolchain.mk - how to build cross glibc toolchains
#
# Copyright (C) 2001,2002,2003,2004,2005,2006,2007,2008,2009  David Wuertele <dave@crossplex.org>
#
# This file is part of the Crossplex suite of make macros - see http://www.crossplex.com/
#
#    Crossplex is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    Crossplex is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Crossplex.  If not, see <http://www.gnu.org/licenses/>.

ifndef GLIBC_TOOLCHAIN_MAKE_LOADED

  GLIBC_TOOLCHAIN_MAKE_LOADED := 1

  include $(CROSSPLEX_BUILD_SYSTEM)/targetfs.mk

### Building Toolchains with TargetFS

  GLIBC_PROGRAMS += sbin/ldconfig                # Configures the dynamic linker runtime bindings
  GLIBC_PROGRAMS += sbin/sln                     # A statically linked program that creates symbolic links
  GLIBC_PROGRAMS += usr/bin/catchsegv            # Can be used to create a stack trace when a program terminates with a segmentation fault
  GLIBC_PROGRAMS += usr/bin/gencat               # Generates message catalogues
  GLIBC_PROGRAMS += usr/bin/getconf              # Displays the system configuration values for file system specific variables
  GLIBC_PROGRAMS += usr/bin/getent               # Gets entries from an administrative database
  GLIBC_PROGRAMS += usr/bin/iconv                # Performs character set conversion
  GLIBC_PROGRAMS += usr/bin/ldd                  # Reports which shared libraries are required by each given program or shared library
  GLIBC_PROGRAMS += usr/bin/locale               # Tells the compiler to enable or disable the use of POSIX locales for built-in operations
  GLIBC_PROGRAMS += usr/bin/localedef            # Compiles locale specifications
  GLIBC_PROGRAMS += usr/bin/mtrace               # Reads and interprets a memory trace file and displays a summary in human-readable format
  GLIBC_PROGRAMS += usr/bin/pcprofiledump        # Dumps information generated by PC profiling
  GLIBC_PROGRAMS += usr/bin/rpcgen               # Generates C code to implement the Remote Procecure Call (RPC) protocol
  GLIBC_PROGRAMS += usr/bin/sprof                # Reads and displays shared object profiling data
  GLIBC_PROGRAMS += usr/bin/tzselect             # Asks the user about the location of the system and reports the corresponding time zone description
  GLIBC_PROGRAMS += usr/bin/xtrace               # Traces the execution of a program by printing the currently executed function
  GLIBC_PROGRAMS += usr/libexec/pt_chown         # A helper program for grantpt to set the owner, group and access permissions of a slave pseudo terminal
  GLIBC_PROGRAMS += usr/sbin/iconvconfig         # Creates fastloading iconv module configuration files
  GLIBC_PROGRAMS += usr/sbin/nscd                # A daemon that provides a cache for the most common name service requests
  GLIBC_PROGRAMS += usr/sbin/rpcinfo             # Makes an RPC call to an RPC server
  GLIBC_PROGRAMS += usr/sbin/zdump               # The time zone dumper
  GLIBC_PROGRAMS += usr/sbin/zic                 # The time zone compiler 

#  TARGET_GLIBC_PROGRAMS += lddlibc4                    # LOST... Assists ldd with object files

  GLIBC_LIBRARIES := 

# lib/$(LIB).so
  GLIBC_LIBRARIES_SO += libSegFault       # The segmentation fault signal handler
  GLIBC_LIBRARIES_SO += libmemusage       # Used by memusage (included in Glibc, but not built in a base CLFS system as it has additional dependencies) to help collect information about the memory usage of a program
  GLIBC_LIBRARIES_SO += libpcprofile      # Contains profiling functions used to track the amount of CPU time spent in specific source code lines

# lib/$(LIB)-$(GLIBC_VERSON).so, lib/$(LIB).so.1
  GLIBC_LIBRARIES_S1 += ld                # The helper program for shared library executables

# lib/$(LIB)-1.0.so, lib/$(LIB).so.1, usr/lib/$(LIB).so
  GLIBC_LIBRARIES_1US += libthread_db # Contains functions useful for building debuggers for multi-threaded programs

# lib/$(LIB)-$(GLIBC_VERSON).so, lib/$(LIB).so.1, usr/lib/$(LIB).a, usr/lib/$(LIB).so
  GLIBC_LIBRARIES_1UAS += libBrokenLocale # Used by programs, such as Mozilla, to solve broken locales
  GLIBC_LIBRARIES_1UAS += libanl          # An asynchronous name lookup library
  GLIBC_LIBRARIES_1UAS += libcrypt        # The cryptography library
  GLIBC_LIBRARIES_1UAS += libnsl          # The network services library
  GLIBC_LIBRARIES_1UAS += librt           # Contains functions providing most of the interfaces specified by the POSIX.1b Realtime Extension
  GLIBC_LIBRARIES_1UAS += libutil         # Contains code for "standard" functions used in many different Unix utilities 

# lib/$(LIB)-$(GLIBC_VERSON).so, $(LIB).so.6, usr/lib/$(LIB).a usr/lib/$(LIB).so
  GLIBC_LIBRARIES_6U += libc              # The main C library
  GLIBC_LIBRARIES_6U += libm              # The main C library

# usr/lib/$(LIB).a
  GLIBC_LIBRARIES_A += libbsd-compat      # Provides the portability needed in order to run certain Berkeley Software Distribution (BSD) programs under Linux
  GLIBC_LIBRARIES_A += libc_nonshared
  GLIBC_LIBRARIES_A += libg               # A runtime library for g++
  GLIBC_LIBRARIES_A += libieee            # The Institute of Electrical and Electronic Engineers (IEEE) floating point library
  GLIBC_LIBRARIES_A += libmcheck          # Contains code run at boot
  GLIBC_LIBRARIES_A += libpthread_nonshared

# lib/$(LIB)-$(GLIBC_VERSON).so, lib/$(LIB).so.2, usr/lib/$(LIB).a, usr/lib/$(LIB).so
  GLIBC_LIBRARIES_2UAS += libdl           # The dynamic linking interface library
  GLIBC_LIBRARIES_2UAS += libresolv       # Contains functions for creating, sending, and interpreting packets to the Internet domain name servers

# lib/$(LIB)-$(GLIBC_VERSON).so, lib/$(LIB).so.2, usr/lib/$(LIB).so
  GLIBC_LIBRARIES_2US += libnss_compat libnss_dns libnss_files libnss_hesiod libnss_nis libnss_nisplus # The Name Service Switch libraries, containing functions for resolving host names, user names, group names, aliases, services, protocols, etc.

# lib/$(LIB)-$(GLIBC_VERSON).so, lib/$(LIB).so.0, usr/lib/$(LIB).so, usr/lib/$(LIB).a
  GLIBC_LIBRARIES_0UAS += libpthread    # The POSIX threads library

# usr/lib/$(LIB).o (NPTL STARTFILES ONLY)
  GLIBC_STARTFILES_UO += crt1
  GLIBC_STARTFILES_UO += crti
  GLIBC_STARTFILES_UO += crtn

# usr/lib/$(LIB).o
  GLIBC_LIBRARIES_UO += Mcrt1
  GLIBC_LIBRARIES_UO += Scrt1
  GLIBC_LIBRARIES_UO += gcrt1

  GLIBC_LIBRARIES_UNKNOWN += librpcsvc    # Contains functions providing miscellaneous RPC services

  # $1 = targetfs name
  # $2 = name of component library of glibc
  # $3 = relative path of component library's files
  # $4 = additional sublib order-only dependencies
  define Glibc_Sub_Lib_Depends

    $1_TARGETFS_INSTALLABLE_COMPONENT += $2

    $1_TARGETFS_INSTALLABLE_FILE += $3

    $1_TARGETFS_TARGETS += $($1_TARGETFS_PREFIX)/$3

    $1_$2_INSTALLABLE_FILE += $3

    $1_$2_TARGETS += $($1_TARGETFS_PREFIX)/$3

    $($1_TARGETFS_PREFIX)/$3: $($1_glibc_TARGETS) | $4

  endef

  # $1 = targetfs name
  # $2 = name of component library of glibc
  # $3 = relative path of component library's files
  # $4 = additional sublib order-only dependencies
  define Glibc_Sub_Lib_Depends_Devel

    $1_TARGETFS_INSTALLABLE_COMPONENT += $2

    $1_TARGETFS_INSTALLABLE_FILE += $3

    $1_TARGETFS_TARGETS += $($1_TARGETFS_PREFIX)/$3

    $1_$2_INSTALLABLE_DEV_FILE += $3

    $1_$2_DEV_TARGETS += $($1_TARGETFS_PREFIX)/$3

    $($1_TARGETFS_PREFIX)/$3: $($1_glibc_TARGETS) | $4

  endef

  # $1 = list of build tags.  We're looking for the value of THREAD=
  # $2 = list of sources
  Glibc_SRC_Plugins = SRC_PLUGIN=$(subst glibc-,glibc-ports-,$(filter glibc-%,$2)) $(if $(filter THREAD=linuxthreads,$1),SRC_PLUGIN=$(subst glibc-,glibc-linuxthreads-,$(filter glibc-%,$2)))

  # $1 = list of build tags.  We're looking for the value of THREAD=
  # $2 = list of sources
  GCC_SRC_Plugins = SRC_PLUGIN=$(filter mpfr-%,$2) SRC_PLUGIN=$(filter gmp-%,$2)

  # $1 = list of sources
  Glibc_NeedSemH = $(and $(filter glibc-2.5,$1),$(filter gcc-3.4.6,$1),NEEDSEMH)

  INSTALL_KERNEL_HEADERS    = $(call TargetFS_Install_Kernel_Headers,$1/$2,$(filter linux-%,$3),NOSTAGE TARGET=$4 $5,,$6)
  INSTALL_BINUTILS          = $(call TargetFS_Install_Autoconf,$1/$2,$(filter binutils-%,$3),NOSTAGE TARGET=$4 SYSROOT=$1/toolchain $5,,$6)
  INSTALL_GCC_CORE_NOSHARED = $(call TargetFS_Install_Autoconf,$1/$2,$(filter gcc-%,$3),NOSTAGE TARGET=$4 NOSHARED SYSROOT=$1/gcc-core-noshared-sysroot MAKEARGS=stage1 $5 $(call GCC_SRC_Plugins,$5,$3),,$6)
  INSTALL_GLIBC_HEADERS     = $(call TargetFS_Install_Autoconf,$1/$2,$(filter glibc-%,$3),NOSTAGE TARGET=$4 SYSROOT=$1/glibc-headers-sysroot MAKEARGS=headers ENV=-i $5 $(call Glibc_SRC_Plugins,$5,$3) $(call Glibc_NeedSemH,$3),,$6)
  INSTALL_GLIBC_STARTFILES  = $(call TargetFS_Install_Autoconf,$1/$2,$(filter glibc-%,$3),NOSTAGE TARGET=$4 SYSROOT=$1/glibc-startfiles-sysroot MAKEARGS=startfiles ENV=-i $5 $(call Glibc_SRC_Plugins,$5,$3) $(call Glibc_NeedSemH,$3),,$6)
  INSTALL_GCC_CORE_SHARED   = $(call TargetFS_Install_Autoconf,$1/$2,$(filter gcc-%,$3),NOSTAGE TARGET=$4 SYSROOT=$1/gcc-core-withshared-libgcc-sysroot MAKEARGS=stage2 $5 $(call GCC_SRC_Plugins,$5,$3),,$6)
  INSTALL_GLIBC_FINAL       = $(call TargetFS_Install_Autoconf,$1/$2,$(filter glibc-%,$3),NOSTAGE TARGET=$4 SYSROOT=$1/glibc-final-sysroot ENV=-i MAKEARGS=final $5 $(call Glibc_SRC_Plugins,$5,$3) $(call Glibc_NeedSemH,$3),,$6)
  INSTALL_GCC_FINAL         = $(call TargetFS_Install_Autoconf,$1/$2,$(filter gcc-%,$3),NOSTAGE TARGET=$4 SYSROOT=$1/toolchain MAKEARGS=stage3 $5 $(call GCC_SRC_Plugins,$5,$3),,$6)
  INSTALL_GDB               = $(call TargetFS_Install_Autoconf,$1/$2,$(filter gdb-%,$3),NOSTAGE TARGET=$4 SYSROOT=$1/toolchain $5,,$6)

  # $1 = build top
  # $2 = toolchain (targetfs) name
  # $3 = target tuple
  # $4 = toolchain source package versions
  # $5 = path code (UNIMPLEMENTED)
  # $6 = toolchain flags
  # $7 = patch tags
  define Glibc_Toolchain

    $(eval $(call Configure_TargetFS,$2/toolchain,$1,$5,,$3))
    $(foreach sysroot,gcc-core-noshared glibc-headers glibc-startfiles glibc-final gcc-core-withshared-libgcc gcc-final gdb,$(eval $(call Configure_TargetFS,$2/$(sysroot)-sysroot,$1,$5,,$3)))

    # GCC Core (no shared libs) build depends on kernel headers and binutils
    $(eval $(call INSTALL_BINUTILS,$2,gcc-core-noshared-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_KERNEL_HEADERS,$2,gcc-core-noshared-sysroot,$4,$3,$6,$7))

    # Glibc Headers build depends on binutils, gcc-core-noshared, and kernel headers
    $(eval $(call INSTALL_BINUTILS,$2,glibc-headers-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_KERNEL_HEADERS,$2,glibc-headers-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_GCC_CORE_NOSHARED,$2,glibc-headers-sysroot,$4,$3,$6,$7))

    # Glibc startfiles build depends on binutils, gcc-core-noshared, kernel headers, and glibc headers
    $(eval $(call INSTALL_BINUTILS,$2,glibc-startfiles-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_KERNEL_HEADERS,$2,glibc-startfiles-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_GCC_CORE_NOSHARED,$2,glibc-startfiles-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_GLIBC_HEADERS,$2,glibc-startfiles-sysroot,$4,$3,$6,$7))

    # GCC Core (shared libs) build depends on binutils, kernel headers, glibc headers, and glibc startfiles
    $(eval $(call INSTALL_BINUTILS,$2,gcc-core-withshared-libgcc-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_KERNEL_HEADERS,$2,gcc-core-withshared-libgcc-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_GLIBC_HEADERS,$2,gcc-core-withshared-libgcc-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_GLIBC_STARTFILES,$2,gcc-core-withshared-libgcc-sysroot,$4,$3,$6,$7))

    # Glibc final build depends on binutils, kernel headers, glibc headers, and GCC Core (shared libs)
    $(eval $(call INSTALL_BINUTILS,$2,glibc-final-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_KERNEL_HEADERS,$2,glibc-final-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_GLIBC_HEADERS,$2,glibc-final-sysroot,$4,$3,$6,$7))
    $(eval $(call INSTALL_GCC_CORE_SHARED,$2,glibc-final-sysroot,$4,$3,$6,$7))

    # Toolchain:  depends on binutils, glibc final, gcc final, and gdb
    $(eval $(call INSTALL_BINUTILS,$2,toolchain,$4,$3,$6,$7))
    $(eval $(call INSTALL_KERNEL_HEADERS,$2,toolchain,$4,$3,$6,$7))
    $(eval $(call INSTALL_GLIBC_FINAL,$2,toolchain,$4,$3,$6,$7))
    $(eval $(call INSTALL_GCC_FINAL,$2,toolchain,$4,$3,$6,$7))
    $(eval $(call INSTALL_GDB,$2,toolchain,$4,$3,$6,$7))

    $2/toolchain_RUNTIMES  += glibc
    $2/toolchain_TOOLCHAIN += glibc
    $2/toolchain_TOOLCHAIN_TARGET_TUPLE = $3

    $2_TOOLCHAIN_TARGETS = $($2/toolchain_TARGETFS_TARGETS)

    # Tell the toolchain TargetFS where to find the files that make up each of the component libraries of glibc
    # If a module calls out one of these component libraries as a runtime dependency, the module's TargetFS should know how to copy it from here
    $(foreach library_name,$(GLIBC_LIBRARIES_SO),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so))
    $(foreach library_name,$(GLIBC_LIBRARIES_S1) $(GLIBC_LIBRARIES_1UAS) $(GLIBC_LIBRARIES_6U) $(GLIBC_LIBRARIES_2UAS) $(GLIBC_LIBRARIES_2US),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name)-$(patsubst glibc-%,%,$(filter glibc-%,$4)).so))
    $(foreach library_name,$(GLIBC_LIBRARIES_S1),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),$(if $(filter mips%,$3),lib/$(library_name).so.1,lib/$(library_name)-linux.so.2)))
    $(foreach library_name,$(GLIBC_LIBRARIES_1US) $(GLIBC_LIBRARIES_1UAS),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so.1))
    $(foreach library_name,$(GLIBC_LIBRARIES_1US),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name)-1.0.so))
    $(foreach library_name,$(GLIBC_LIBRARIES_1US) $(GLIBC_LIBRARIES_1UAS) $(GLIBC_LIBRARIES_2UAS) $(GLIBC_LIBRARIES_2US) $(GLIBC_LIBRARIES_0UAS) $(GLIBC_LIBRARIES_6U),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),usr/lib/$(library_name).so))
    $(foreach library_name,$(GLIBC_LIBRARIES_6U),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so.6))
    $(foreach library_name,$(GLIBC_LIBRARIES_2UAS) $(GLIBC_LIBRARIES_2US),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so.2))
    $(foreach library_name,$(GLIBC_LIBRARIES_0UAS),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so.0))
    $(foreach library_name,$(GLIBC_LIBRARIES_UO) $(GLIBC_STARTFILES_UO),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),usr/lib/$(library_name).o))

    $(foreach library_name,$(GLIBC_LIBRARIES_1UAS) $(GLIBC_LIBRARIES_6U) $(GLIBC_LIBRARIES_A) $(GLIBC_LIBRARIES_2UAS) $(GLIBC_LIBRARIES_0UAS),$(call Glibc_Sub_Lib_Depends_Devel,$2/toolchain,$(library_name),usr/lib/$(library_name).a))

    # TODO:  add inter-library dependencies for the above component libraries

    # there are some libraries that aren't defined completely yet

  endef

  # $1 = build top
  # $2 = toolchain (targetfs) name
  # $3 = target tuple
  # $4 = toolchain path on host
  # $5 = path code (UNIMPLEMENTED)
  define Glibc_Prebuilt_Toolchain

    $(eval $(call Configure_TargetFS,$2/toolchain,$1,$5,,$3))

    $2/toolchain_RUNTIMES  += glibc
    $2/toolchain_TOOLCHAIN += glibc
    $2/toolchain_TOOLCHAIN_TARGET_TUPLE = $3

    $2_TOOLCHAIN_TARGETS = $(patsubst $4/%,$($2/toolchain_TARGETFS_PREFIX)/%,$(foreach dirname,bin include lib share $3 libexec usr,$(wildcard $4/$(dirname))))

    $2/toolchain_glibc_TARGETS = $(patsubst $4/%,$($2/toolchain_TARGETFS_PREFIX)/%,$(foreach dirname,bin include lib share $3 libexec usr,$(wildcard $4/$(dirname))))

    $$($2/toolchain_glibc_TARGETS): $($2/toolchain_TARGETFS_PREFIX)/%: $4/%
	mkdir -p $$(@D)
	ln -sf $$< $$@

    # Tell the toolchain TargetFS where to find the files that make up each of the component libraries of glibc
    # If a module calls out one of these component libraries as a runtime dependency, the module's TargetFS should know how to copy it from here
    $(foreach library_name,$(GLIBC_LIBRARIES_SO),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so,$$($2/toolchain_glibc_TARGETS)))
    $(foreach library_name,$(GLIBC_LIBRARIES_S1) $(GLIBC_LIBRARIES_1UAS) $(GLIBC_LIBRARIES_6U) $(GLIBC_LIBRARIES_2UAS) $(GLIBC_LIBRARIES_2US),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name)-$(patsubst libc-%.so,%,$(notdir $(wildcard $4/lib/libc-*.so))).so,$$($2/toolchain_glibc_TARGETS)))
    $(foreach library_name,$(GLIBC_LIBRARIES_S1),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),$(if $(filter mips%,$3),lib/$(library_name).so.1,lib/$(library_name)-linux.so.2),$$($2/toolchain_glibc_TARGETS)))
    $(foreach library_name,$(GLIBC_LIBRARIES_1US) $(GLIBC_LIBRARIES_1UAS),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so.1,$$($2/toolchain_glibc_TARGETS)))
    $(foreach library_name,$(GLIBC_LIBRARIES_1US),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name)-1.0.so,$$($2/toolchain_glibc_TARGETS)))
    $(foreach library_name,$(GLIBC_LIBRARIES_1US) $(GLIBC_LIBRARIES_1UAS) $(GLIBC_LIBRARIES_2UAS) $(GLIBC_LIBRARIES_2US) $(GLIBC_LIBRARIES_0UAS) $(GLIBC_LIBRARIES_6U),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),$(patsubst $4/%,%,$(wildcard $4/lib/$(library_name).so) $(wildcard $4/usr/lib/$(library_name).so) $(wildcard $4/usr/lib/$(library_name).so)),$$($2/toolchain_glibc_TARGETS)))
    $(foreach library_name,$(GLIBC_LIBRARIES_6U),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so.6,$$($2/toolchain_glibc_TARGETS)))
    $(foreach library_name,$(GLIBC_LIBRARIES_2UAS) $(GLIBC_LIBRARIES_2US),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so.2,$$($2/toolchain_glibc_TARGETS)))
    $(foreach library_name,$(GLIBC_LIBRARIES_0UAS),$(call Glibc_Sub_Lib_Depends,$2/toolchain,$(library_name),lib/$(library_name).so.0,$$($2/toolchain_glibc_TARGETS)))

  endef

endif
