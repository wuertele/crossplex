#!/usr/bin/perl -w
#	-*- Perl -*-		get-latest-sources:	fetch sources of thirdparty packages using the freshmeat database
#
#	(usage)% get-latest-sources
#
#	David Wuertele	Wed Nov 11 15:45:23 2009	Steal This Program!!!

use strict;
use Data::Dumper;
use WWW::Freshmeat;
use LWP::UserAgent;
use HTTP::Request;
use FileHandle;

my @packages;

if ($#ARGV >= 0) {
    @packages = @ARGV;
} else {
    push @packages, 'gdb';
    push @packages, 'busybox';
    push @packages, 'syslinux';
    push @packages, 'pkg-config';
    push @packages, 'Python';
    push @packages, 'autoconf';
    push @packages, 'libtool';
    push @packages, 'automake';
    push @packages, 'binutils';
    push @packages, 'gcc';
    push @packages, 'glibc';
    push @packages, 'linux';
}

my $fm = new WWW::Freshmeat (token => '81BDbCA18QG47FHBGMvK');

foreach my $package (@packages) {
    fetch_latest_project_tarball ($package);
}

sub fetch_latest_project_tarball {
    my $project_name = shift;
    my $project = $fm->retrieve_project($project_name);
    if (!defined $project) {
	print STDERR "Can't retrieve project with ID $project_name\n";
	return;
    }

    my $version = $project->version();
    my %licenses;
    my @license_list = split (/\,\s+/, $project->license_list());
    print STDERR "$project_name-$version license list: (", join (", ", @license_list), ")\n";
    map { $licenses{$_}++ } @license_list;
    my $license_dir;
    foreach my $use_actual_name (qw( GPL LGPL FDL )) {
	if (defined ($licenses{$use_actual_name})) {
	    $license_dir = $use_actual_name;
	    goto GOT_DIR;
	}
    }
    
    foreach my $redist_license ('APL',
				'AFPL',
				'APSL',
				'Artistic License',
				'Boost Software License',
				'BSD',
				'CDDL',
				'Freeware',
				'MIT',
				'MPL',
				'NPL',
				'OSI Approved',
				'Public Domain',
				'Python',
				'Shareware') {
	
	if (defined ($licenses{$redist_license})) {
	    $license_dir = 'REDIST_OK';
	    goto GOT_DIR;
	}
    }

    if (!defined ($license_dir)) {
	if ($#license_list >= 0) {
	    $license_dir = shift @license_list;
	    print STDERR "couldn't find good directory for $project_name-$version licenses:", join (", ", @license_list), "\n";
	} else {
	    $license_dir = 'unknown';
	    print STDERR "couldn't discover license for $project_name-$version\n";
	}
    }
    
  GOT_DIR:
    
    system ("/bin/mkdir", "-p", $license_dir);
    my $direct_download = $project->direct_download();
    my $download_url;
    if (ref ($direct_download) eq 'HASH') {
	$download_url = $direct_download->{redirector};
    } else {
	print Dumper ($project);
	return;
    }
    
    my $ua = new LWP::UserAgent;
    $ua->agent("test-fresh/1.0");
    my $request = new HTTP::Request ("GET", $download_url);
    print STDERR "Freshmeat direct download redirector for $project_name-$version is $download_url...\n";
    my $response = $ua->request ($request);
    my $filename = $response->filename;

    if ($response->header ('content_type') eq 'text/ftp-dir-listing') {
	my $ftp_url;

	if ($response->content =~ /$project_name-$version\.tar\.gz/) {
	    $filename = "$project_name-$version.tar.gz";
	} elsif ($response->content =~ /$project_name-$version\.tar\.bz2/) {
	    $filename = "$project_name-$version.tar.bz2";
	}

	$ftp_url = $response->base . $filename;
	print STDERR "attempting to download $ftp_url\n";
	my $ftp_request = new HTTP::Request ("GET", $ftp_url);
	$response = $ua->request ($ftp_request);
    }

    if (! defined ($filename) or $filename !~ /\S/) {
	print Dumper ($response);	
	exit -1;
    }
    
    print STDERR "Saving $filename.\n";
    my $fh = new FileHandle (">$license_dir/" . $filename);
    if (defined ($fh)) {
	$fh->print ($response->content);
	$fh->close;
    } else {
	printf STDERR "huh?\n";
    }
}
